/* Generated By:JavaCC: Do not edit this line. PajeGrammarTokenManager.java */
package br.ufrgs.inf.tlbellini;
import br.ufrgs.inf.tlbellini.lib.*;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.util.Scanner;
import java.util.ArrayList;

/** Token Manager. */
public class PajeGrammarTokenManager implements PajeGrammarConstants
{

  /** Debug output. */
  public  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x4L) != 0L)
            return 6;
         if ((active0 & 0xfffffff80a00L) != 0L)
         {
            jjmatchedKind = 51;
            return 27;
         }
         if ((active0 & 0x10000L) != 0L)
         {
            jjmatchedKind = 51;
            return 10;
         }
         if ((active0 & 0x9000L) != 0L)
         {
            jjmatchedKind = 51;
            return 22;
         }
         return -1;
      case 1:
         if ((active0 & 0x9000L) != 0L)
         {
            jjmatchedKind = 51;
            jjmatchedPos = 1;
            return 21;
         }
         if ((active0 & 0xfffffff90a00L) != 0L)
         {
            jjmatchedKind = 51;
            jjmatchedPos = 1;
            return 27;
         }
         return -1;
      case 2:
         if ((active0 & 0xfffff3e91a00L) != 0L)
         {
            jjmatchedKind = 51;
            jjmatchedPos = 2;
            return 27;
         }
         if ((active0 & 0x8000L) != 0L)
         {
            jjmatchedKind = 51;
            jjmatchedPos = 2;
            return 20;
         }
         if ((active0 & 0xc100000L) != 0L)
            return 27;
         return -1;
      case 3:
         if ((active0 & 0x8000L) != 0L)
         {
            jjmatchedKind = 51;
            jjmatchedPos = 3;
            return 19;
         }
         if ((active0 & 0xffffe3881200L) != 0L)
         {
            jjmatchedKind = 51;
            jjmatchedPos = 3;
            return 27;
         }
         if ((active0 & 0x10610800L) != 0L)
            return 27;
         return -1;
      case 4:
         if ((active0 & 0xffffc2800000L) != 0L)
         {
            jjmatchedKind = 51;
            jjmatchedPos = 4;
            return 27;
         }
         if ((active0 & 0x21081200L) != 0L)
            return 27;
         if ((active0 & 0x8000L) != 0L)
         {
            jjmatchedKind = 51;
            jjmatchedPos = 4;
            return 18;
         }
         return -1;
      case 5:
         if ((active0 & 0xffffc0000000L) != 0L)
         {
            jjmatchedKind = 51;
            jjmatchedPos = 5;
            return 27;
         }
         if ((active0 & 0x2800000L) != 0L)
            return 27;
         if ((active0 & 0x8000L) != 0L)
         {
            jjmatchedKind = 51;
            jjmatchedPos = 5;
            return 17;
         }
         return -1;
      case 6:
         if ((active0 & 0xffffc0000000L) != 0L)
         {
            jjmatchedKind = 51;
            jjmatchedPos = 6;
            return 27;
         }
         if ((active0 & 0x8000L) != 0L)
         {
            jjmatchedKind = 51;
            jjmatchedPos = 6;
            return 16;
         }
         return -1;
      case 7:
         if ((active0 & 0x8000L) != 0L)
         {
            jjmatchedKind = 51;
            jjmatchedPos = 7;
            return 15;
         }
         if ((active0 & 0xffffc0000000L) != 0L)
         {
            jjmatchedKind = 51;
            jjmatchedPos = 7;
            return 27;
         }
         return -1;
      case 8:
         if ((active0 & 0x8000L) != 0L)
            return 14;
         if ((active0 & 0xffffc0000000L) != 0L)
         {
            jjmatchedKind = 51;
            jjmatchedPos = 8;
            return 27;
         }
         return -1;
      case 9:
         if ((active0 & 0xffffc0000000L) != 0L)
         {
            jjmatchedKind = 51;
            jjmatchedPos = 9;
            return 27;
         }
         return -1;
      case 10:
         if ((active0 & 0x400000000000L) != 0L)
            return 27;
         if ((active0 & 0xbfffc0000000L) != 0L)
         {
            jjmatchedKind = 51;
            jjmatchedPos = 10;
            return 27;
         }
         return -1;
      case 11:
         if ((active0 & 0x35ffc0000000L) != 0L)
         {
            jjmatchedKind = 51;
            jjmatchedPos = 11;
            return 27;
         }
         if ((active0 & 0x8a0000000000L) != 0L)
            return 27;
         return -1;
      case 12:
         if ((active0 & 0x11ffc0000000L) != 0L)
         {
            jjmatchedKind = 51;
            jjmatchedPos = 12;
            return 27;
         }
         if ((active0 & 0x240000000000L) != 0L)
            return 27;
         return -1;
      case 13:
         if ((active0 & 0x100000000000L) != 0L)
            return 27;
         if ((active0 & 0x1ffc0000000L) != 0L)
         {
            jjmatchedKind = 51;
            jjmatchedPos = 13;
            return 27;
         }
         return -1;
      case 14:
         if ((active0 & 0x3fc0000000L) != 0L)
         {
            jjmatchedKind = 51;
            jjmatchedPos = 14;
            return 27;
         }
         if ((active0 & 0x1c000000000L) != 0L)
            return 27;
         return -1;
      case 15:
         if ((active0 & 0x3fc0000000L) != 0L)
         {
            jjmatchedKind = 51;
            jjmatchedPos = 15;
            return 27;
         }
         return -1;
      case 16:
         if ((active0 & 0x3fc0000000L) != 0L)
         {
            jjmatchedKind = 51;
            jjmatchedPos = 16;
            return 27;
         }
         return -1;
      case 17:
         if ((active0 & 0x400000000L) != 0L)
            return 27;
         if ((active0 & 0x3bc0000000L) != 0L)
         {
            jjmatchedKind = 51;
            jjmatchedPos = 17;
            return 27;
         }
         return -1;
      case 18:
         if ((active0 & 0x28c0000000L) != 0L)
         {
            jjmatchedKind = 51;
            jjmatchedPos = 18;
            return 27;
         }
         if ((active0 & 0x1300000000L) != 0L)
            return 27;
         return -1;
      case 19:
         if ((active0 & 0x8c0000000L) != 0L)
         {
            jjmatchedKind = 51;
            jjmatchedPos = 19;
            return 27;
         }
         if ((active0 & 0x2000000000L) != 0L)
            return 27;
         return -1;
      case 20:
         if ((active0 & 0xc0000000L) != 0L)
         {
            jjmatchedKind = 51;
            jjmatchedPos = 20;
            return 27;
         }
         if ((active0 & 0x800000000L) != 0L)
            return 27;
         return -1;
      case 21:
         if ((active0 & 0x40000000L) != 0L)
         {
            jjmatchedKind = 51;
            jjmatchedPos = 21;
            return 27;
         }
         if ((active0 & 0x80000000L) != 0L)
            return 27;
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0), pos + 1);
}
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 9:
         return jjStopAtPos(0, 3);
      case 13:
         return jjStartNfaWithStates_0(0, 2, 6);
      case 32:
         return jjStopAtPos(0, 1);
      case 37:
         jjmatchedKind = 7;
         return jjMoveStringLiteralDfa1_0(0x140L);
      case 65:
         return jjMoveStringLiteralDfa1_0(0x200L);
      case 67:
         return jjMoveStringLiteralDfa1_0(0x9000L);
      case 70:
         return jjMoveStringLiteralDfa1_0(0x400000L);
      case 75:
         return jjMoveStringLiteralDfa1_0(0x100000L);
      case 76:
         return jjMoveStringLiteralDfa1_0(0x200000L);
      case 78:
         return jjMoveStringLiteralDfa1_0(0x800L);
      case 80:
         return jjMoveStringLiteralDfa1_0(0xffffc0000000L);
      case 84:
         return jjMoveStringLiteralDfa1_0(0x10000L);
      case 86:
         return jjMoveStringLiteralDfa1_0(0x80000L);
      case 99:
         return jjMoveStringLiteralDfa1_0(0x20000000L);
      case 100:
         return jjMoveStringLiteralDfa1_0(0x12000000L);
      case 102:
         return jjMoveStringLiteralDfa1_0(0x1000000L);
      case 104:
         return jjMoveStringLiteralDfa1_0(0x8000000L);
      case 105:
         return jjMoveStringLiteralDfa1_0(0x4000000L);
      case 115:
         return jjMoveStringLiteralDfa1_0(0x800000L);
      default :
         return jjMoveNfa_0(0, 0);
   }
}
private int jjMoveStringLiteralDfa1_0(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0);
      return 1;
   }
   switch(curChar)
   {
      case 69:
         return jjMoveStringLiteralDfa2_0(active0, 0x140L);
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0xffffd0080800L);
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x8100000L);
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0x610000L);
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x1000200L);
      case 110:
         return jjMoveStringLiteralDfa2_0(active0, 0x4000000L);
      case 111:
         return jjMoveStringLiteralDfa2_0(active0, 0x22009000L);
      case 116:
         return jjMoveStringLiteralDfa2_0(active0, 0x800000L);
      default :
         break;
   }
   return jjStartNfa_0(0, active0);
}
private int jjMoveStringLiteralDfa2_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(0, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0);
      return 2;
   }
   switch(curChar)
   {
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x200L);
      case 106:
         return jjMoveStringLiteralDfa3_0(active0, 0xffffc0000000L);
      case 108:
         return jjMoveStringLiteralDfa3_0(active0, 0x20481000L);
      case 109:
         return jjMoveStringLiteralDfa3_0(active0, 0x10800L);
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0x208100L);
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x1000000L);
      case 114:
         return jjMoveStringLiteralDfa3_0(active0, 0x800000L);
      case 116:
         if ((active0 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(2, 26, 27);
         return jjMoveStringLiteralDfa3_0(active0, 0x10000000L);
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0x2000000L);
      case 118:
         return jjMoveStringLiteralDfa3_0(active0, 0x40L);
      case 120:
         if ((active0 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(2, 27, 27);
         break;
      case 121:
         if ((active0 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(2, 20, 27);
         break;
      default :
         break;
   }
   return jjStartNfa_0(1, active0);
}
private int jjMoveStringLiteralDfa3_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(1, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0);
      return 3;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0x1000200L);
      case 98:
         return jjMoveStringLiteralDfa4_0(active0, 0x2000000L);
      case 100:
         return jjMoveStringLiteralDfa4_0(active0, 0x100L);
      case 101:
         if ((active0 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(3, 11, 27);
         else if ((active0 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(3, 16, 27);
         else if ((active0 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(3, 21, 27);
         else if ((active0 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(3, 22, 27);
         else if ((active0 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(3, 28, 27);
         return jjMoveStringLiteralDfa4_0(active0, 0xffffc0000040L);
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x800000L);
      case 111:
         return jjMoveStringLiteralDfa4_0(active0, 0x20001000L);
      case 116:
         return jjMoveStringLiteralDfa4_0(active0, 0x8000L);
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0x80000L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0);
}
private int jjMoveStringLiteralDfa4_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(2, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0);
      return 4;
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa5_0(active0, 0x8000000000L);
      case 67:
         return jjMoveStringLiteralDfa5_0(active0, 0x1000000000L);
      case 68:
         return jjMoveStringLiteralDfa5_0(active0, 0x2fc0000000L);
      case 69:
         return jjMoveStringLiteralDfa5_0(active0, 0x400000000100L);
      case 78:
         return jjMoveStringLiteralDfa5_0(active0, 0x800000000000L);
      case 80:
         return jjMoveStringLiteralDfa5_0(active0, 0xc0000000000L);
      case 82:
         return jjMoveStringLiteralDfa5_0(active0, 0x100000000000L);
      case 83:
         return jjMoveStringLiteralDfa5_0(active0, 0x234000000000L);
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0x8000L);
      case 101:
         if ((active0 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(4, 19, 27);
         break;
      case 108:
         return jjMoveStringLiteralDfa5_0(active0, 0x2000000L);
      case 110:
         return jjMoveStringLiteralDfa5_0(active0, 0x800040L);
      case 114:
         if ((active0 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(4, 12, 27);
         else if ((active0 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(4, 29, 27);
         break;
      case 115:
         if ((active0 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(4, 9, 27);
         break;
      case 116:
         if ((active0 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(4, 24, 27);
         break;
      default :
         break;
   }
   return jjStartNfa_0(3, active0);
}
private int jjMoveStringLiteralDfa5_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(3, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0);
      return 5;
   }
   switch(curChar)
   {
      case 100:
         return jjMoveStringLiteralDfa6_0(active0, 0x8000000000L);
      case 101:
         if ((active0 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(5, 25, 27);
         return jjMoveStringLiteralDfa6_0(active0, 0x926fc0000000L);
      case 103:
         if ((active0 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(5, 23, 27);
         break;
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0x8000L);
      case 110:
         return jjMoveStringLiteralDfa6_0(active0, 0x400000000000L);
      case 111:
         return jjMoveStringLiteralDfa6_0(active0, 0x80000000000L);
      case 114:
         return jjMoveStringLiteralDfa6_0(active0, 0x1000000000L);
      case 116:
         return jjMoveStringLiteralDfa6_0(active0, 0x200000000040L);
      case 117:
         return jjMoveStringLiteralDfa6_0(active0, 0x50000000000L);
      case 118:
         return jjMoveStringLiteralDfa6_0(active0, 0x100L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0);
}
private int jjMoveStringLiteralDfa6_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(4, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0);
      return 6;
   }
   switch(curChar)
   {
      case 68:
         return jjMoveStringLiteralDfa7_0(active0, 0x40L);
      case 97:
         return jjMoveStringLiteralDfa7_0(active0, 0x200000000000L);
      case 98:
         return jjMoveStringLiteralDfa7_0(active0, 0x10000000000L);
      case 100:
         return jjMoveStringLiteralDfa7_0(active0, 0x408000000000L);
      case 101:
         return jjMoveStringLiteralDfa7_0(active0, 0x1000000100L);
      case 102:
         return jjMoveStringLiteralDfa7_0(active0, 0xfc0000000L);
      case 110:
         return jjMoveStringLiteralDfa7_0(active0, 0x8000L);
      case 112:
         return jjMoveStringLiteralDfa7_0(active0, 0x80000000000L);
      case 115:
         return jjMoveStringLiteralDfa7_0(active0, 0x142000000000L);
      case 116:
         return jjMoveStringLiteralDfa7_0(active0, 0x24000000000L);
      case 119:
         return jjMoveStringLiteralDfa7_0(active0, 0x800000000000L);
      default :
         break;
   }
   return jjStartNfa_0(5, active0);
}
private int jjMoveStringLiteralDfa7_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(5, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0);
      return 7;
   }
   switch(curChar)
   {
      case 69:
         return jjMoveStringLiteralDfa8_0(active0, 0x800000000000L);
      case 76:
         return jjMoveStringLiteralDfa8_0(active0, 0x400000000000L);
      case 83:
         return jjMoveStringLiteralDfa8_0(active0, 0xa0000000000L);
      case 86:
         return jjMoveStringLiteralDfa8_0(active0, 0x1c000000000L);
      case 97:
         return jjMoveStringLiteralDfa8_0(active0, 0x1000000000L);
      case 101:
         return jjMoveStringLiteralDfa8_0(active0, 0x100000008040L);
      case 104:
         return jjMoveStringLiteralDfa8_0(active0, 0x40000000000L);
      case 105:
         return jjMoveStringLiteralDfa8_0(active0, 0xfc0000000L);
      case 110:
         return jjMoveStringLiteralDfa8_0(active0, 0x100L);
      case 114:
         return jjMoveStringLiteralDfa8_0(active0, 0x200000000000L);
      case 116:
         return jjMoveStringLiteralDfa8_0(active0, 0x2000000000L);
      default :
         break;
   }
   return jjStartNfa_0(6, active0);
}
private int jjMoveStringLiteralDfa8_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(6, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0);
      return 8;
   }
   switch(curChar)
   {
      case 83:
         return jjMoveStringLiteralDfa9_0(active0, 0x40000000000L);
      case 97:
         return jjMoveStringLiteralDfa9_0(active0, 0x1c000000000L);
      case 102:
         if ((active0 & 0x40L) != 0L)
            return jjStopAtPos(8, 6);
         break;
      case 105:
         return jjMoveStringLiteralDfa9_0(active0, 0x400000000000L);
      case 110:
         return jjMoveStringLiteralDfa9_0(active0, 0xfc0000000L);
      case 114:
         if ((active0 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(8, 15, 14);
         return jjMoveStringLiteralDfa9_0(active0, 0x2000000000L);
      case 116:
         return jjMoveStringLiteralDfa9_0(active0, 0x3a1000000100L);
      case 118:
         return jjMoveStringLiteralDfa9_0(active0, 0x800000000000L);
      default :
         break;
   }
   return jjStartNfa_0(7, active0);
}
private int jjMoveStringLiteralDfa9_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(7, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0);
      return 9;
   }
   switch(curChar)
   {
      case 68:
         return jjMoveStringLiteralDfa10_0(active0, 0x100L);
      case 76:
         return jjMoveStringLiteralDfa10_0(active0, 0x200000000000L);
      case 83:
         return jjMoveStringLiteralDfa10_0(active0, 0x100000000000L);
      case 97:
         return jjMoveStringLiteralDfa10_0(active0, 0xa0000000000L);
      case 101:
         return jjMoveStringLiteralDfa10_0(active0, 0x801fc0000000L);
      case 110:
         return jjMoveStringLiteralDfa10_0(active0, 0x400000000000L);
      case 111:
         return jjMoveStringLiteralDfa10_0(active0, 0x2000000000L);
      case 114:
         return jjMoveStringLiteralDfa10_0(active0, 0x1c000000000L);
      case 116:
         return jjMoveStringLiteralDfa10_0(active0, 0x40000000000L);
      default :
         break;
   }
   return jjStartNfa_0(8, active0);
}
private int jjMoveStringLiteralDfa10_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(8, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0);
      return 10;
   }
   switch(curChar)
   {
      case 67:
         return jjMoveStringLiteralDfa11_0(active0, 0x1040000000L);
      case 69:
         return jjMoveStringLiteralDfa11_0(active0, 0xa00000000L);
      case 76:
         return jjMoveStringLiteralDfa11_0(active0, 0x400000000L);
      case 83:
         return jjMoveStringLiteralDfa11_0(active0, 0x100000000L);
      case 86:
         return jjMoveStringLiteralDfa11_0(active0, 0x80000000L);
      case 97:
         return jjMoveStringLiteralDfa11_0(active0, 0x40000000000L);
      case 101:
         return jjMoveStringLiteralDfa11_0(active0, 0x100L);
      case 105:
         return jjMoveStringLiteralDfa11_0(active0, 0x21c000000000L);
      case 107:
         if ((active0 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(10, 46, 27);
         break;
      case 110:
         return jjMoveStringLiteralDfa11_0(active0, 0x800000000000L);
      case 116:
         return jjMoveStringLiteralDfa11_0(active0, 0x1a0000000000L);
      case 121:
         return jjMoveStringLiteralDfa11_0(active0, 0x2000000000L);
      default :
         break;
   }
   return jjStartNfa_0(9, active0);
}
private int jjMoveStringLiteralDfa11_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(9, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(10, active0);
      return 11;
   }
   switch(curChar)
   {
      case 67:
         return jjMoveStringLiteralDfa12_0(active0, 0x2000000000L);
      case 97:
         return jjMoveStringLiteralDfa12_0(active0, 0x11c080000000L);
      case 101:
         if ((active0 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(11, 41, 27);
         else if ((active0 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(11, 43, 27);
         break;
      case 102:
         if ((active0 & 0x100L) != 0L)
            return jjStopAtPos(11, 8);
         break;
      case 105:
         return jjMoveStringLiteralDfa12_0(active0, 0x400000000L);
      case 110:
         return jjMoveStringLiteralDfa12_0(active0, 0x200800000000L);
      case 111:
         return jjMoveStringLiteralDfa12_0(active0, 0x1040000000L);
      case 116:
         if ((active0 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(11, 47, 27);
         return jjMoveStringLiteralDfa12_0(active0, 0x40100000000L);
      case 118:
         return jjMoveStringLiteralDfa12_0(active0, 0x200000000L);
      default :
         break;
   }
   return jjStartNfa_0(10, active0);
}
private int jjMoveStringLiteralDfa12_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(10, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(11, active0);
      return 12;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa13_0(active0, 0x100000000L);
      case 98:
         return jjMoveStringLiteralDfa13_0(active0, 0x1c000000000L);
      case 101:
         if ((active0 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(12, 42, 27);
         return jjMoveStringLiteralDfa13_0(active0, 0x200000000L);
      case 107:
         if ((active0 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(12, 45, 27);
         break;
      case 110:
         return jjMoveStringLiteralDfa13_0(active0, 0x1440000000L);
      case 111:
         return jjMoveStringLiteralDfa13_0(active0, 0x2000000000L);
      case 114:
         return jjMoveStringLiteralDfa13_0(active0, 0x80000000L);
      case 116:
         return jjMoveStringLiteralDfa13_0(active0, 0x100800000000L);
      default :
         break;
   }
   return jjStartNfa_0(11, active0);
}
private int jjMoveStringLiteralDfa13_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(11, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(12, active0);
      return 13;
   }
   switch(curChar)
   {
      case 101:
         if ((active0 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(13, 44, 27);
         break;
      case 105:
         return jjMoveStringLiteralDfa14_0(active0, 0x880000000L);
      case 107:
         return jjMoveStringLiteralDfa14_0(active0, 0x400000000L);
      case 108:
         return jjMoveStringLiteralDfa14_0(active0, 0x1c000000000L);
      case 110:
         return jjMoveStringLiteralDfa14_0(active0, 0x2200000000L);
      case 116:
         return jjMoveStringLiteralDfa14_0(active0, 0x1140000000L);
      default :
         break;
   }
   return jjStartNfa_0(12, active0);
}
private int jjMoveStringLiteralDfa14_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(12, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(13, active0);
      return 14;
   }
   switch(curChar)
   {
      case 84:
         return jjMoveStringLiteralDfa15_0(active0, 0x400000000L);
      case 97:
         return jjMoveStringLiteralDfa15_0(active0, 0x10c0000000L);
      case 101:
         if ((active0 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(14, 38, 27);
         else if ((active0 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(14, 39, 27);
         else if ((active0 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(14, 40, 27);
         return jjMoveStringLiteralDfa15_0(active0, 0x100000000L);
      case 116:
         return jjMoveStringLiteralDfa15_0(active0, 0x2a00000000L);
      default :
         break;
   }
   return jjStartNfa_0(13, active0);
}
private int jjMoveStringLiteralDfa15_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(13, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(14, active0);
      return 15;
   }
   switch(curChar)
   {
      case 84:
         return jjMoveStringLiteralDfa16_0(active0, 0x300000000L);
      case 97:
         return jjMoveStringLiteralDfa16_0(active0, 0x2000000000L);
      case 98:
         return jjMoveStringLiteralDfa16_0(active0, 0x80000000L);
      case 105:
         return jjMoveStringLiteralDfa16_0(active0, 0x1040000000L);
      case 121:
         return jjMoveStringLiteralDfa16_0(active0, 0xc00000000L);
      default :
         break;
   }
   return jjStartNfa_0(14, active0);
}
private int jjMoveStringLiteralDfa16_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(14, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(15, active0);
      return 16;
   }
   switch(curChar)
   {
      case 86:
         return jjMoveStringLiteralDfa17_0(active0, 0x800000000L);
      case 105:
         return jjMoveStringLiteralDfa17_0(active0, 0x2000000000L);
      case 108:
         return jjMoveStringLiteralDfa17_0(active0, 0x80000000L);
      case 110:
         return jjMoveStringLiteralDfa17_0(active0, 0x1040000000L);
      case 112:
         return jjMoveStringLiteralDfa17_0(active0, 0x400000000L);
      case 121:
         return jjMoveStringLiteralDfa17_0(active0, 0x300000000L);
      default :
         break;
   }
   return jjStartNfa_0(15, active0);
}
private int jjMoveStringLiteralDfa17_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(15, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(16, active0);
      return 17;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa18_0(active0, 0x800000000L);
      case 101:
         if ((active0 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(17, 34, 27);
         return jjMoveStringLiteralDfa18_0(active0, 0x10c0000000L);
      case 110:
         return jjMoveStringLiteralDfa18_0(active0, 0x2000000000L);
      case 112:
         return jjMoveStringLiteralDfa18_0(active0, 0x300000000L);
      default :
         break;
   }
   return jjStartNfa_0(16, active0);
}
private int jjMoveStringLiteralDfa18_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(16, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(17, active0);
      return 18;
   }
   switch(curChar)
   {
      case 84:
         return jjMoveStringLiteralDfa19_0(active0, 0x80000000L);
      case 101:
         if ((active0 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(18, 32, 27);
         else if ((active0 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(18, 33, 27);
         return jjMoveStringLiteralDfa19_0(active0, 0x2000000000L);
      case 108:
         return jjMoveStringLiteralDfa19_0(active0, 0x800000000L);
      case 114:
         if ((active0 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(18, 36, 27);
         return jjMoveStringLiteralDfa19_0(active0, 0x40000000L);
      default :
         break;
   }
   return jjStartNfa_0(17, active0);
}
private int jjMoveStringLiteralDfa19_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(17, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(18, active0);
      return 19;
   }
   switch(curChar)
   {
      case 84:
         return jjMoveStringLiteralDfa20_0(active0, 0x40000000L);
      case 114:
         if ((active0 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(19, 37, 27);
         break;
      case 117:
         return jjMoveStringLiteralDfa20_0(active0, 0x800000000L);
      case 121:
         return jjMoveStringLiteralDfa20_0(active0, 0x80000000L);
      default :
         break;
   }
   return jjStartNfa_0(18, active0);
}
private int jjMoveStringLiteralDfa20_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(18, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(19, active0);
      return 20;
   }
   switch(curChar)
   {
      case 101:
         if ((active0 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(20, 35, 27);
         break;
      case 112:
         return jjMoveStringLiteralDfa21_0(active0, 0x80000000L);
      case 121:
         return jjMoveStringLiteralDfa21_0(active0, 0x40000000L);
      default :
         break;
   }
   return jjStartNfa_0(19, active0);
}
private int jjMoveStringLiteralDfa21_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(19, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(20, active0);
      return 21;
   }
   switch(curChar)
   {
      case 101:
         if ((active0 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(21, 31, 27);
         break;
      case 112:
         return jjMoveStringLiteralDfa22_0(active0, 0x40000000L);
      default :
         break;
   }
   return jjStartNfa_0(20, active0);
}
private int jjMoveStringLiteralDfa22_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(20, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(21, active0);
      return 22;
   }
   switch(curChar)
   {
      case 101:
         if ((active0 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(22, 30, 27);
         break;
      default :
         break;
   }
   return jjStartNfa_0(21, active0);
}
private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 159;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 15:
               case 27:
                  if ((0x3ff200000000000L & l) == 0L)
                     break;
                  if (kind > 51)
                     kind = 51;
                  jjCheckNAdd(27);
                  break;
               case 22:
                  if ((0x3ff200000000000L & l) == 0L)
                     break;
                  if (kind > 51)
                     kind = 51;
                  jjCheckNAdd(27);
                  break;
               case 18:
                  if ((0x3ff200000000000L & l) == 0L)
                     break;
                  if (kind > 51)
                     kind = 51;
                  jjCheckNAdd(27);
                  break;
               case 20:
                  if ((0x3ff200000000000L & l) == 0L)
                     break;
                  if (kind > 51)
                     kind = 51;
                  jjCheckNAdd(27);
                  break;
               case 14:
                  if ((0x3ff200000000000L & l) == 0L)
                     break;
                  if (kind > 51)
                     kind = 51;
                  jjCheckNAdd(27);
                  break;
               case 16:
                  if ((0x3ff200000000000L & l) == 0L)
                     break;
                  if (kind > 51)
                     kind = 51;
                  jjCheckNAdd(27);
                  break;
               case 19:
                  if ((0x3ff200000000000L & l) == 0L)
                     break;
                  if (kind > 51)
                     kind = 51;
                  jjCheckNAdd(27);
                  break;
               case 21:
                  if ((0x3ff200000000000L & l) == 0L)
                     break;
                  if (kind > 51)
                     kind = 51;
                  jjCheckNAdd(27);
                  break;
               case 0:
                  if ((0xfffffffbffffffffL & l) != 0L)
                  {
                     if (kind > 52)
                        kind = 52;
                  }
                  else if (curChar == 34)
                     jjCheckNAddTwoStates(25, 26);
                  if ((0x3ff200000000000L & l) != 0L)
                  {
                     if (kind > 51)
                        kind = 51;
                     jjCheckNAdd(27);
                  }
                  else if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 6;
                  else if (curChar == 10)
                  {
                     if (kind > 5)
                        kind = 5;
                  }
                  else if (curChar == 35)
                     jjCheckNAddStates(0, 2);
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 48)
                        kind = 48;
                     jjCheckNAddStates(3, 5);
                  }
                  break;
               case 17:
                  if ((0x3ff200000000000L & l) == 0L)
                     break;
                  if (kind > 51)
                     kind = 51;
                  jjCheckNAdd(27);
                  break;
               case 10:
                  if ((0x3ff200000000000L & l) == 0L)
                     break;
                  if (kind > 51)
                     kind = 51;
                  jjCheckNAdd(27);
                  break;
               case 1:
                  if ((0xffffffffffffdbffL & l) != 0L)
                     jjCheckNAddStates(0, 2);
                  break;
               case 2:
               case 3:
                  if (curChar == 10 && kind > 4)
                     kind = 4;
                  break;
               case 4:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 5:
               case 6:
                  if (curChar == 10 && kind > 5)
                     kind = 5;
                  break;
               case 7:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 6;
                  break;
               case 24:
                  if (curChar == 34)
                     jjCheckNAddTwoStates(25, 26);
                  break;
               case 25:
                  if ((0x3ff200000000000L & l) != 0L)
                     jjCheckNAddTwoStates(25, 26);
                  break;
               case 26:
                  if (curChar == 34 && kind > 51)
                     kind = 51;
                  break;
               case 28:
                  if ((0xfffffffbffffffffL & l) != 0L && kind > 52)
                     kind = 52;
                  break;
               case 30:
                  if ((0x8400000000L & l) != 0L && kind > 52)
                     kind = 52;
                  break;
               case 93:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 48)
                     kind = 48;
                  jjCheckNAddStates(3, 5);
                  break;
               case 94:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 48)
                     kind = 48;
                  jjCheckNAdd(94);
                  break;
               case 95:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(95, 96);
                  break;
               case 96:
                  if (curChar == 46)
                     jjCheckNAdd(97);
                  break;
               case 97:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 49)
                     kind = 49;
                  jjCheckNAdd(97);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 15:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 51)
                        kind = 51;
                     jjCheckNAdd(27);
                  }
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 14;
                  break;
               case 22:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 51)
                        kind = 51;
                     jjCheckNAdd(27);
                  }
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 21;
                  break;
               case 18:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 51)
                        kind = 51;
                     jjCheckNAdd(27);
                  }
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 17;
                  break;
               case 20:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 51)
                        kind = 51;
                     jjCheckNAdd(27);
                  }
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 19;
                  break;
               case 14:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 51)
                        kind = 51;
                     jjCheckNAdd(27);
                  }
                  if (curChar == 84)
                     jjstateSet[jjnewStateCnt++] = 13;
                  break;
               case 16:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 51)
                        kind = 51;
                     jjCheckNAdd(27);
                  }
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 15;
                  break;
               case 19:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 51)
                        kind = 51;
                     jjCheckNAdd(27);
                  }
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 18;
                  break;
               case 21:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 51)
                        kind = 51;
                     jjCheckNAdd(27);
                  }
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 20;
                  break;
               case 0:
                  if (kind > 52)
                     kind = 52;
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 51)
                        kind = 51;
                     jjCheckNAdd(27);
                  }
                  else if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 30;
                  if (curChar == 83)
                     jjAddStates(6, 9);
                  else if (curChar == 68)
                     jjAddStates(10, 11);
                  else if (curChar == 69)
                     jjAddStates(12, 14);
                  else if (curChar == 67)
                     jjstateSet[jjnewStateCnt++] = 22;
                  else if (curChar == 84)
                     jjstateSet[jjnewStateCnt++] = 10;
                  break;
               case 17:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 51)
                        kind = 51;
                     jjCheckNAdd(27);
                  }
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 16;
                  break;
               case 10:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 51)
                        kind = 51;
                     jjCheckNAdd(27);
                  }
                  if (curChar == 121)
                     jjstateSet[jjnewStateCnt++] = 9;
                  break;
               case 1:
                  jjAddStates(0, 2);
                  break;
               case 8:
                  if (curChar == 101 && kind > 10)
                     kind = 10;
                  break;
               case 9:
               case 12:
               case 32:
                  if (curChar == 112)
                     jjCheckNAdd(8);
                  break;
               case 11:
                  if (curChar == 84)
                     jjstateSet[jjnewStateCnt++] = 10;
                  break;
               case 13:
                  if (curChar == 121)
                     jjstateSet[jjnewStateCnt++] = 12;
                  break;
               case 23:
                  if (curChar == 67)
                     jjstateSet[jjnewStateCnt++] = 22;
                  break;
               case 25:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjAddStates(15, 16);
                  break;
               case 27:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 51)
                     kind = 51;
                  jjCheckNAdd(27);
                  break;
               case 28:
                  if (kind > 52)
                     kind = 52;
                  break;
               case 29:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 30;
                  break;
               case 30:
                  if ((0x4400010000000L & l) != 0L && kind > 52)
                     kind = 52;
                  break;
               case 31:
                  if (curChar == 69)
                     jjAddStates(12, 14);
                  break;
               case 33:
                  if (curChar == 121)
                     jjstateSet[jjnewStateCnt++] = 32;
                  break;
               case 34:
                  if (curChar == 84)
                     jjstateSet[jjnewStateCnt++] = 33;
                  break;
               case 35:
                  if (curChar == 121)
                     jjstateSet[jjnewStateCnt++] = 34;
                  break;
               case 36:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 35;
                  break;
               case 37:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 36;
                  break;
               case 38:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 37;
                  break;
               case 39:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 38;
                  break;
               case 40:
                  if (curChar == 101 && kind > 14)
                     kind = 14;
                  break;
               case 41:
               case 67:
                  if (curChar == 112)
                     jjCheckNAdd(40);
                  break;
               case 42:
                  if (curChar == 121)
                     jjstateSet[jjnewStateCnt++] = 41;
                  break;
               case 43:
                  if (curChar == 84)
                     jjstateSet[jjnewStateCnt++] = 42;
                  break;
               case 44:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 43;
                  break;
               case 45:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 44;
                  break;
               case 46:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 45;
                  break;
               case 47:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 46;
                  break;
               case 48:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 47;
                  break;
               case 49:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 48;
                  break;
               case 50:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 49;
                  break;
               case 51:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 50;
                  break;
               case 52:
                  if (curChar == 67)
                     jjstateSet[jjnewStateCnt++] = 51;
                  break;
               case 53:
                  if (curChar == 100)
                     jjstateSet[jjnewStateCnt++] = 52;
                  break;
               case 54:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 53;
                  break;
               case 55:
                  if (curChar == 114 && kind > 18)
                     kind = 18;
                  break;
               case 56:
               case 82:
                  if (curChar == 101)
                     jjCheckNAdd(55);
                  break;
               case 57:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 56;
                  break;
               case 58:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 57;
                  break;
               case 59:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 58;
                  break;
               case 60:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 59;
                  break;
               case 61:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 60;
                  break;
               case 62:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 61;
                  break;
               case 63:
                  if (curChar == 67)
                     jjstateSet[jjnewStateCnt++] = 62;
                  break;
               case 64:
                  if (curChar == 100)
                     jjstateSet[jjnewStateCnt++] = 63;
                  break;
               case 65:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 64;
                  break;
               case 66:
                  if (curChar == 68)
                     jjAddStates(10, 11);
                  break;
               case 68:
                  if (curChar == 121)
                     jjstateSet[jjnewStateCnt++] = 67;
                  break;
               case 69:
                  if (curChar == 84)
                     jjstateSet[jjnewStateCnt++] = 68;
                  break;
               case 70:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 69;
                  break;
               case 71:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 70;
                  break;
               case 72:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 71;
                  break;
               case 73:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 72;
                  break;
               case 74:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 73;
                  break;
               case 75:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 74;
                  break;
               case 76:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 75;
                  break;
               case 77:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 76;
                  break;
               case 78:
                  if (curChar == 67)
                     jjstateSet[jjnewStateCnt++] = 77;
                  break;
               case 79:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 78;
                  break;
               case 80:
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 79;
                  break;
               case 81:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 80;
                  break;
               case 83:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 82;
                  break;
               case 84:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 83;
                  break;
               case 85:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 84;
                  break;
               case 86:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 85;
                  break;
               case 87:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 86;
                  break;
               case 88:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 87;
                  break;
               case 89:
                  if (curChar == 67)
                     jjstateSet[jjnewStateCnt++] = 88;
                  break;
               case 90:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 89;
                  break;
               case 91:
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 90;
                  break;
               case 92:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 91;
                  break;
               case 98:
                  if (curChar == 83)
                     jjAddStates(6, 9);
                  break;
               case 99:
                  if (curChar == 101 && kind > 13)
                     kind = 13;
                  break;
               case 100:
               case 116:
                  if (curChar == 112)
                     jjCheckNAdd(99);
                  break;
               case 101:
                  if (curChar == 121)
                     jjstateSet[jjnewStateCnt++] = 100;
                  break;
               case 102:
                  if (curChar == 84)
                     jjstateSet[jjnewStateCnt++] = 101;
                  break;
               case 103:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 102;
                  break;
               case 104:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 103;
                  break;
               case 105:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 104;
                  break;
               case 106:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 105;
                  break;
               case 107:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 106;
                  break;
               case 108:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 107;
                  break;
               case 109:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 108;
                  break;
               case 110:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 109;
                  break;
               case 111:
                  if (curChar == 67)
                     jjstateSet[jjnewStateCnt++] = 110;
                  break;
               case 112:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 111;
                  break;
               case 113:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 112;
                  break;
               case 114:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 113;
                  break;
               case 115:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 114;
                  break;
               case 117:
                  if (curChar == 121)
                     jjstateSet[jjnewStateCnt++] = 116;
                  break;
               case 118:
                  if (curChar == 84)
                     jjstateSet[jjnewStateCnt++] = 117;
                  break;
               case 119:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 118;
                  break;
               case 120:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 119;
                  break;
               case 121:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 120;
                  break;
               case 122:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 121;
                  break;
               case 123:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 122;
                  break;
               case 124:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 123;
                  break;
               case 125:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 124;
                  break;
               case 126:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 125;
                  break;
               case 127:
                  if (curChar == 67)
                     jjstateSet[jjnewStateCnt++] = 126;
                  break;
               case 128:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 127;
                  break;
               case 129:
                  if (curChar == 99)
                     jjstateSet[jjnewStateCnt++] = 128;
                  break;
               case 130:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 129;
                  break;
               case 131:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 130;
                  break;
               case 132:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 131;
                  break;
               case 133:
                  if (curChar == 114 && kind > 17)
                     kind = 17;
                  break;
               case 134:
               case 146:
                  if (curChar == 101)
                     jjCheckNAdd(133);
                  break;
               case 135:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 134;
                  break;
               case 136:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 135;
                  break;
               case 137:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 136;
                  break;
               case 138:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 137;
                  break;
               case 139:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 138;
                  break;
               case 140:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 139;
                  break;
               case 141:
                  if (curChar == 67)
                     jjstateSet[jjnewStateCnt++] = 140;
                  break;
               case 142:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 141;
                  break;
               case 143:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 142;
                  break;
               case 144:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 143;
                  break;
               case 145:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 144;
                  break;
               case 147:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 146;
                  break;
               case 148:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 147;
                  break;
               case 149:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 148;
                  break;
               case 150:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 149;
                  break;
               case 151:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 150;
                  break;
               case 152:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 151;
                  break;
               case 153:
                  if (curChar == 67)
                     jjstateSet[jjnewStateCnt++] = 152;
                  break;
               case 154:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 153;
                  break;
               case 155:
                  if (curChar == 99)
                     jjstateSet[jjnewStateCnt++] = 154;
                  break;
               case 156:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 155;
                  break;
               case 157:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 156;
                  break;
               case 158:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 157;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((jjbitVec0[i2] & l2) != 0L && kind > 52)
                     kind = 52;
                  break;
               case 1:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(0, 2);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 159 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   1, 2, 4, 94, 95, 96, 115, 132, 145, 158, 81, 92, 39, 54, 65, 25, 
   26, 
};

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, "\45\105\166\145\156\164\104\145\146", 
"\45", "\45\105\156\144\105\166\145\156\164\104\145\146", "\101\154\151\141\163", 
null, "\116\141\155\145", "\103\157\154\157\162", null, null, 
"\103\157\156\164\141\151\156\145\162", "\124\151\155\145", null, null, "\126\141\154\165\145", "\113\145\171", 
"\114\151\156\145", "\106\151\154\145", "\163\164\162\151\156\147", "\146\154\157\141\164", 
"\144\157\165\142\154\145", "\151\156\164", "\150\145\170", "\144\141\164\145", "\143\157\154\157\162", 
"\120\141\152\145\104\145\146\151\156\145\103\157\156\164\141\151\156\145\162\124\171\160\145", 
"\120\141\152\145\104\145\146\151\156\145\126\141\162\151\141\142\154\145\124\171\160\145", 
"\120\141\152\145\104\145\146\151\156\145\123\164\141\164\145\124\171\160\145", 
"\120\141\152\145\104\145\146\151\156\145\105\166\145\156\164\124\171\160\145", "\120\141\152\145\104\145\146\151\156\145\114\151\156\153\124\171\160\145", 
"\120\141\152\145\104\145\146\151\156\145\105\156\164\151\164\171\126\141\154\165\145", 
"\120\141\152\145\103\162\145\141\164\145\103\157\156\164\141\151\156\145\162", 
"\120\141\152\145\104\145\163\164\162\157\171\103\157\156\164\141\151\156\145\162", "\120\141\152\145\123\145\164\126\141\162\151\141\142\154\145", 
"\120\141\152\145\101\144\144\126\141\162\151\141\142\154\145", "\120\141\152\145\123\165\142\126\141\162\151\141\142\154\145", 
"\120\141\152\145\123\145\164\123\164\141\164\145", "\120\141\152\145\120\165\163\150\123\164\141\164\145", 
"\120\141\152\145\120\157\160\123\164\141\164\145", "\120\141\152\145\122\145\163\145\164\123\164\141\164\145", 
"\120\141\152\145\123\164\141\162\164\114\151\156\153", "\120\141\152\145\105\156\144\114\151\156\153", 
"\120\141\152\145\116\145\167\105\166\145\156\164", null, null, null, null, null, null, };

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
};
static final long[] jjtoToken = {
   0x1bffffffffffe1L, 
};
static final long[] jjtoSkip = {
   0x1eL, 
};
protected SimpleCharStream input_stream;
private final int[] jjrounds = new int[159];
private final int[] jjstateSet = new int[318];
protected char curChar;
/** Constructor. */
public PajeGrammarTokenManager(SimpleCharStream stream){
   if (SimpleCharStream.staticFlag)
      throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
   input_stream = stream;
}

/** Constructor. */
public PajeGrammarTokenManager(SimpleCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}

/** Reinitialise parser. */
public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 159; i-- > 0;)
      jjrounds[i] = 0x80000000;
}

/** Reinitialise parser. */
public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}

/** Switch to specified lex state. */
public void SwitchTo(int lexState)
{
   if (lexState >= 1 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      return matchedToken;
   }

   jjmatchedKind = 0x7fffffff;
   jjmatchedPos = 0;
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
         input_stream.backup(curPos - jjmatchedPos - 1);
      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
      {
         matchedToken = jjFillToken();
         return matchedToken;
      }
      else
      {
         continue EOFLoop;
      }
   }
   int error_line = input_stream.getEndLine();
   int error_column = input_stream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try { input_stream.readChar(); input_stream.backup(1); }
   catch (java.io.IOException e1) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
   }
   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

}

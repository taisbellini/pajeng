/* Generated By:JavaCC: Do not edit this line. PajeGrammar.java */
package br.ufrgs.inf.tlbellini;
import br.ufrgs.inf.tlbellini.lib.*;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.util.Scanner;
import java.util.ArrayList;

public class PajeGrammar implements PajeGrammarConstants {

  public static ArrayList<PajeEventDefinition> eventDefinitions = new ArrayList<PajeEventDefinition>();

  public static void main(String args []) throws ParseException, FileNotFoundException
  {
        FileInputStream input;
        Scanner sc = new Scanner(System.in);
    if(args.length > 0)
    {
      input = new FileInputStream(args[0]);
    }else
    {
      System.out.println("Input the file path: ");
      input = new FileInputStream(sc.nextLine());
    }
    long startTime = System.currentTimeMillis();
    PajeGrammar parser = new PajeGrammar(input);

      try
      {
        switch (parser.paje())
        {
          case 4 :
          long endTime = System.currentTimeMillis();
          System.out.println("OK. Finished in: " + (endTime - startTime) +"ms");
          break;
          case 1 :
          System.out.println("Goodbye.");
          break;
          default :
          break;
        }
      }
      catch (Exception e)
      {
        System.out.println("NOK.");
        System.out.println(e.getMessage());
      }
      catch (Error e)
      {
        System.out.println("Oops.");
        System.out.println(e.getMessage());
      }
    }

  final public int paje() throws ParseException {
    declarations();
    events();
    jj_consume_token(0);
    {if (true) return 4;}
    throw new Error("Missing return statement in function");
  }

  final public void declarations() throws ParseException {
 PajeEventDefinition newDef;
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EVENT_DEF_BEGIN:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      newDef = declaration();
         eventDefinitions.add(newDef);
    }
  }

  final public void empty() throws ParseException {
    jj_consume_token(0);
  }

  final public PajeEventDefinition declaration() throws ParseException {
  PajeEventId nameId;
  int id;
  ArrayList<PajeField> fieldsList;
    jj_consume_token(EVENT_DEF_BEGIN);
    nameId = event_name();
    id = event_id();
    jj_consume_token(BREAK);
          PajeEventDefinition def = new PajeEventDefinition(nameId, id);
    fieldsList = fields();
    jj_consume_token(EVENT_DEF_END);
    jj_consume_token(BREAK);
                def.addFields(fieldsList);
                {if (true) return def;}
    throw new Error("Missing return statement in function");
  }

  final public PajeEventId event_name() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PAJE_DEFINE_CONTAINER_TYPE:
      jj_consume_token(PAJE_DEFINE_CONTAINER_TYPE);
                                         {if (true) return PajeEventId.PajeDefineContainerType;}
      break;
    case PAJE_DEFINE_VARIABLE_TYPE:
      jj_consume_token(PAJE_DEFINE_VARIABLE_TYPE);
                                       {if (true) return  PajeEventId.PajeDefineVariableType;}
      break;
    case PAJE_DEFINE_STATE_TYPE:
      jj_consume_token(PAJE_DEFINE_STATE_TYPE);
                                     {if (true) return PajeEventId.PajeDefineStateType;}
      break;
    case PAJE_DEFINE_EVENT_TYPE:
      jj_consume_token(PAJE_DEFINE_EVENT_TYPE);
                                     {if (true) return PajeEventId.PajeDefineEventType;}
      break;
    case PAJE_DEFINE_LINK_TYPE:
      jj_consume_token(PAJE_DEFINE_LINK_TYPE);
                                   {if (true) return PajeEventId.PajeDefineLinkType;}
      break;
    case PAJE_DEFINE_ENTITY_VALUE:
      jj_consume_token(PAJE_DEFINE_ENTITY_VALUE);
                                      {if (true) return PajeEventId.PajeDefineEntityValue;}
      break;
    case PAJE_CREATE_CONTAINER:
      jj_consume_token(PAJE_CREATE_CONTAINER);
                                   {if (true) return PajeEventId.PajeCreateContainer;}
      break;
    case PAJE_DESTROY_CONTAINER:
      jj_consume_token(PAJE_DESTROY_CONTAINER);
                                    {if (true) return PajeEventId.PajeDestroyContainer;}
      break;
    case PAJE_SET_VARIABLE:
      jj_consume_token(PAJE_SET_VARIABLE);
                               {if (true) return PajeEventId.PajeSetVariable;}
      break;
    case PAJE_ADD_VARIABLE:
      jj_consume_token(PAJE_ADD_VARIABLE);
                               {if (true) return PajeEventId.PajeAddVariable;}
      break;
    case PAJE_SUB_VARIABLE:
      jj_consume_token(PAJE_SUB_VARIABLE);
                               {if (true) return PajeEventId.PajeSubVariable;}
      break;
    case PAJE_SET_STATE:
      jj_consume_token(PAJE_SET_STATE);
                            {if (true) return PajeEventId.PajeSetState;}
      break;
    case PAJE_PUSH_STATE:
      jj_consume_token(PAJE_PUSH_STATE);
                             {if (true) return PajeEventId.PajePushState;}
      break;
    case PAJE_POP_STATE:
      jj_consume_token(PAJE_POP_STATE);
                            {if (true) return PajeEventId.PajePopState;}
      break;
    case PAJE_RESET_STATE:
      jj_consume_token(PAJE_RESET_STATE);
                              {if (true) return PajeEventId.PajeResetState;}
      break;
    case PAJE_START_LINK:
      jj_consume_token(PAJE_START_LINK);
                             {if (true) return PajeEventId.PajeStartLink;}
      break;
    case PAJE_END_LINK:
      jj_consume_token(PAJE_END_LINK);
                           {if (true) return PajeEventId.PajeEndLink;}
      break;
    case PAJE_NEW_EVENT:
      jj_consume_token(PAJE_NEW_EVENT);
                            {if (true) return PajeEventId.PajeNewEvent;}
      break;
    default:
      jj_la1[1] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public int event_id() throws ParseException {
 Token value;
    value = jj_consume_token(INT);
                    {if (true) return Integer.parseInt(value.image);}
    throw new Error("Missing return statement in function");
  }

  final public ArrayList<PajeField> fields() throws ParseException {
  ArrayList<PajeField> fieldsList = new ArrayList<PajeField>();
  PajeField newField;
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EVENT_DEF:
        ;
        break;
      default:
        jj_la1[2] = jj_gen;
        break label_2;
      }
      newField = field();
        fieldsList.add(newField);
    }
   {if (true) return fieldsList;}
    throw new Error("Missing return statement in function");
  }

  final public PajeField field() throws ParseException {
        PajeField newField = new PajeField();
        PajeFieldName newFieldName;
        PajeFieldType newFieldType;
    jj_consume_token(EVENT_DEF);
    newFieldName = field_name();
    newFieldType = field_type();
    newField.setField(newFieldName);
        newField.setType(newFieldType);
    jj_consume_token(BREAK);
   {if (true) return newField;}
    throw new Error("Missing return statement in function");
  }

  final public PajeFieldName field_name() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EVENT_DEF_ALIAS:
      jj_consume_token(EVENT_DEF_ALIAS);
                     {if (true) return PajeFieldName.Alias;}
      break;
    case EVENT_DEF_TYPE:
      jj_consume_token(EVENT_DEF_TYPE);
                            {if (true) return PajeFieldName.Type;}
      break;
    case EVENT_DEF_NAME:
      jj_consume_token(EVENT_DEF_NAME);
                            {if (true) return PajeFieldName.Name;}
      break;
    case EVENT_DEF_COLOR:
      jj_consume_token(EVENT_DEF_COLOR);
                             {if (true) return PajeFieldName.Color;}
      break;
    case EVENT_DEF_START_CONTAINER_TYPE:
      jj_consume_token(EVENT_DEF_START_CONTAINER_TYPE);
                                            {if (true) return PajeFieldName.StartContainerType;}
      break;
    case EVENT_DEF_END_CONTAINER_TYPE:
      jj_consume_token(EVENT_DEF_END_CONTAINER_TYPE);
                                          {if (true) return PajeFieldName.EndContainerType;}
      break;
    case EVENT_DEF_CONTAINER:
      jj_consume_token(EVENT_DEF_CONTAINER);
                                 {if (true) return PajeFieldName.Container;}
      break;
    case EVENT_DEF_TIME:
      jj_consume_token(EVENT_DEF_TIME);
                            {if (true) return PajeFieldName.Time;}
      break;
    case EVENT_DEF_START_CONTAINER:
      jj_consume_token(EVENT_DEF_START_CONTAINER);
                                       {if (true) return PajeFieldName.StartContainer;}
      break;
    case EVENT_DEF_END_CONTAINER:
      jj_consume_token(EVENT_DEF_END_CONTAINER);
                                     {if (true) return PajeFieldName.EndContainer;}
      break;
    case EVENT_DEF_VALUE:
      jj_consume_token(EVENT_DEF_VALUE);
                             {if (true) return PajeFieldName.Value;}
      break;
    case EVENT_DEF_KEY:
      jj_consume_token(EVENT_DEF_KEY);
                           {if (true) return PajeFieldName.Key;}
      break;
    case EVENT_DEF_LINE:
      jj_consume_token(EVENT_DEF_LINE);
                        {if (true) return PajeFieldName.Line;}
      break;
    case EVENT_DEF_FILE:
      jj_consume_token(EVENT_DEF_FILE);
                        {if (true) return PajeFieldName.File;}
      break;
    case STRING:
      jj_consume_token(STRING);
                    {if (true) return PajeFieldName.Extra;}/*dar um jeito de pegar esse nome; */
      break;
    default:
      jj_la1[3] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public PajeFieldType field_type() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EVENT_DEF_FIELD_TYPE_STRING:
      jj_consume_token(EVENT_DEF_FIELD_TYPE_STRING);
                                         {if (true) return PajeFieldType.PAJE_string;}
      break;
    case EVENT_DEF_FIELD_TYPE_FLOAT:
      jj_consume_token(EVENT_DEF_FIELD_TYPE_FLOAT);
                                        {if (true) return PajeFieldType.PAJE_float;}
      break;
    case EVENT_DEF_FIELD_TYPE_DOUBLE:
      jj_consume_token(EVENT_DEF_FIELD_TYPE_DOUBLE);
                                         {if (true) return PajeFieldType.PAJE_double;}
      break;
    case EVENT_DEF_FIELD_TYPE_INT:
      jj_consume_token(EVENT_DEF_FIELD_TYPE_INT);
                                      {if (true) return PajeFieldType.PAJE_int;}
      break;
    case EVENT_DEF_FIELD_TYPE_HEX:
      jj_consume_token(EVENT_DEF_FIELD_TYPE_HEX);
                                      {if (true) return PajeFieldType.PAJE_hex;}
      break;
    case EVENT_DEF_FIELD_TYPE_DATE:
      jj_consume_token(EVENT_DEF_FIELD_TYPE_DATE);
                                       {if (true) return PajeFieldType.PAJE_date;}
      break;
    case EVENT_DEF_FIELD_TYPE_COLOR:
      jj_consume_token(EVENT_DEF_FIELD_TYPE_COLOR);
                                        {if (true) return PajeFieldType.PAJE_color;}
      break;
    default:
      jj_la1[4] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public void events() throws ParseException {
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BREAK:
      case INT:
        ;
        break;
      default:
        jj_la1[5] = jj_gen;
        break label_3;
      }
      event();
    }
  }

  final public void event() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INT:
      non_empty_event();
      break;
    case BREAK:
      jj_consume_token(BREAK);
      break;
    default:
      jj_la1[6] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void non_empty_event() throws ParseException {

    jj_consume_token(INT);

    arguments();
    jj_consume_token(BREAK);

  }

  final public void arguments() throws ParseException {
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INT:
      case FLOAT:
      case STRING:
        ;
        break;
      default:
        jj_la1[7] = jj_gen;
        break label_4;
      }
      argument();
    }
  }

  final public void argument() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case STRING:
      jj_consume_token(STRING);
      break;
    case FLOAT:
      jj_consume_token(FLOAT);
      break;
    case INT:
      jj_consume_token(INT);
      break;
    default:
      jj_la1[8] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  /** Generated Token Manager. */
  public PajeGrammarTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[9];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x40,0xc0000000,0x80,0x7ffe00,0x3f800000,0x20,0x20,0x0,0x0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0xffff,0x0,0x80000,0x0,0x10000,0x10000,0xb0000,0xb0000,};
   }

  /** Constructor with InputStream. */
  public PajeGrammar(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public PajeGrammar(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new PajeGrammarTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 9; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 9; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public PajeGrammar(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new PajeGrammarTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 9; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 9; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public PajeGrammar(PajeGrammarTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 9; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(PajeGrammarTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 9; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[54];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 9; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 54; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}

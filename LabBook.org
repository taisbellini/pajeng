#+TITLE: Bellini's LabBook
#+AUTHOR: Lucas e Tais
#+LATEX_HEADER: \usepackage[margin=2cm,a4paper]{geometry}
#+STARTUP: overview indent
#+TAGS: Lucas(L) Tais(T) noexport(n) deprecated(d)
#+EXPORT_SELECT_TAGS: export
#+EXPORT_EXCLUDE_TAGS: noexport
#+SEQ_TODO: TODO(t!) STARTED(s!) WAITING(w!) | DONE(d!) CANCELLED(c!) DEFERRED(f!)

* 2015-09-15 Planning                                            :Lucas:Tais:

|---------+--------------------------------------------------|
| Sep/Oct | Complete Java Simulator for the Paje file format |
| Nov/Dec | Database modeling for Paje traces                |
| Jan/Feb | Experimentation and Performance Evaluation       |
| Mar/Jun | Write the thesis                                 |
|---------+--------------------------------------------------|

* 2015-09-15 Structure / Draft of TCC                            :Lucas:Tais:

1. Introduction (3 pages max)
   + Context (current scenario with pajeng c++)
   + Motivation
2. Basic Concepts? (5 pages max)
   + JavaCC?
   + Ferramentas de análise de desempenho
3. PajeNG
   + How it is used by others (pjdump, etc)
   + Description of how it works internally
   + The problems with the current approach
     + Focus on your contribution
4. Java Simulator
   + JavaCC / Perf. Eval. against others / Why JavaCC?
5. Database modeling
6. Perf. Eval. / Experimentation / Results
7. Conclusion
* 2016-02-15 Performance issues                                  :Lucas:Tais:

Tais report that her solution to DB insertion has severe performance
issues. The initial solution was that every *pop* event become a
insert. That didn't work, so Tais optimize with an alternative
implementation which uses StringBuffer and create many insert commands
on that object. They only get executed at the end of the parsing. Tais
was never capable to evaluate if this solution is faster because
execution runs out of memory.

So, by looking into this SO entry:

+ http://stackoverflow.com/questions/11389449/performance-of-mysql-insert-statements-in-java-batch-mode-prepared-statements-v

We propose a new attempt to solve the performance problem. The SO
entry proposes four solutions, we will take the last one, which seems
the best. To correctly adapt this fourth solution to Tais's case, we
should limit the batch size to something acceptable. If not, we will
run out of memory again because the (usual) trace file size is just
too big.

So, next plans are like this:
- Tais will limit the size of the batch considering the number of
  operations on it.
- Each batch will contain five StringBuffers, one for each paje type
  (Container, State, Link, Variable, and Event).
- Every time something gets added to one of these string buffers, the
  operation count of the batch gets increased.
- When the batch size reaches a (configurable) value X, the code
  executes the batch, zero it, and we start again filling.
- Tais will do a quick performance analysis by changing the
  (configurable) value X to see the impact in execution time.

How to know the baseline:
- Find out how long it take to only parse with the Java version. You
  can do that by checking out the *no-db* branch.


* 2016-02-15 How to install and configure 

Ola, 

Estou finalizando a implementação do simulador com a inserção no banco. 

Tem alguns arquivos de teste na pasta trace, aqueles bem pequenos para
cada tipo de entidade. Eu acabei de commitar a inserção do arquivo
states.trace.

Queria te pedir algumas coisas:

1) se possível testar essa inserção, e ver se o que está gerando no
   banco é o que se espera. É bem pouco, 3 estados só pode
   incrementá-lo se quiser ; 

2) criar mais alguns arquivos desses se julgar necessário para cobrir
   todos os casos possíveis de forma que eu possa debugar mais
   facilmente; 

3) fornecer um arquivo maior e mais completo para iniciar os testes
   para fazer as consultas.


Se não tiveres tempo agora podemos marcar uma reunião quando tu voltar
pra fazermos esses testes e correções.


Como executar:

- instalar MySQL  e MySQL Workbench 

- criar uma instancia local chamada "root" com senha também "root" e
  porta 3306 (é o padrão do Mysql) 


- abrir no Workbench o ER-model.mdb e na opção "Database" selecionar
  "Forward Engineer" e apenas seguir os passos, garantindo que a opção
  "Generate INSERT statements for tables" esteja marcada na segunda
  janela que aparece 

OU

- executar o script pajeDB.sql na instancia criada.

Acho que é isso que precisa pra executar. Se tiver algum problema pode
me avisar.
